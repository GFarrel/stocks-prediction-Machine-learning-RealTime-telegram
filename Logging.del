import logging
import sys

FORMAT_LOG = '%(asctime)s [%(threadName)s] %(name)s - [%(levelname)-5.5s] - %(funcName)s() - %(message)s'
# "[%(asctime)s] [%(levelname)s] [%(name)s] [%(funcName)s():%(lineno)s] [PID:%(process)d TID:%(thread)d] %(message)s",
FILE_LOG_NAME = 'Log.log'
LOG_LEVEL = logging.DEBUG


class Log_Single_Tone(object):
    __instance = None
    def __new__(cls, val):
        if Log_Single_Tone.__instance is None:
            Log_Single_Tone.__instance = Log_Base.__new__(cls)
        Log_Single_Tone.__instance.val = val
        return Log_Single_Tone.__instance

class Log_Base(object):
    @staticmethod
    def __init__(file_log_name = FILE_LOG_NAME):
        logging.basicConfig(
            level=LOG_LEVEL,
            format=FORMAT_LOG,
            handlers=[
                logging.FileHandler(file_log_name),
                logging.StreamHandler()
            ]
        )

    def Logging(self):
        return logging





